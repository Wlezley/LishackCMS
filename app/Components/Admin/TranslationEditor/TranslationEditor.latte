<style>
.key-col {
    width: 300px;
}

.key-col input[readonly] {
    background-color: var(--bs-gray-500);
    color: var(--bs-black);
}

.copy-col {
    width: 50px;
}

.action-col {
    width: 60px;
}

.linked-textarea {
    resize: none;
    overflow-y: hidden;
}
</style>

{form form, class => 'translationEditorForm'}
    <table id="translationsTable" class="table table-responsive table-striped table-hover table-dark">
        <thead>
            <tr>
                <th scope="col" class="key-col">{$_('key')}</th>
                <th scope="col">{$languages[$defaultLang]} ({$_('default')})</th>
                <th scope="col" class="copy-col"></th>
                <th scope="col">{$languages[$targetLang]}</th>
                <th scope="col" class="action-col"></th>
            </tr>
        </thead>
        <tbody>
            {foreach $translations as $key => $texts}
                <tr class="translation-row">
                    <td class="align-top key-col"><input type="text" class="form-control key-input bg-war-ning" value="{$key}" required readonly></td>
                    <td class="align-middle"><textarea class="form-control linked-textarea source-text" rows="1">{$texts['default']}</textarea></td>
                    <td class="align-middle copy-col"><button type="button" class="btn btn-secondary copy-text" tabindex=-1><i class="fa-solid fa-right-from-bracket"></i></i></button></td>
                    <td class="align-middle"><textarea class="form-control linked-textarea target-text" rows="1">{$texts[$targetLang]}</textarea></td>
                    <td class="align-middle action-col"><button type="button" class="btn btn-secondary remove-row" tabindex=-1 disabled><i class="fa-solid fa-minus"></i></button></td>
                </tr>
            {/foreach}
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4"></td>
                <td class="align-middle action-col"><button type="button" class="btn btn-success" id="addRow"><i class="fa-solid fa-plus"></i></button></td>
            </tr>
        </tfoot>
    </table>

    {input target_lang}
    {input translations}
    {input save, class => 'btn btn-primary float-end'}
{/form}

{syntax off}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.querySelector("#translationsTable tbody");
            const hiddenTargetLang = document.querySelector("input[name='target_lang']");
            const hiddenTranslations = document.querySelector("input[name='translations']");

            // ADD ROW BUTTON
            function addRow(key = "", sourceText = "", targetText = "") {
                const tr = document.createElement("tr");
                tr.classList.add("translation-row")

                tr.innerHTML = `
                    <td class="align-top key-col"><input type="text" class="form-control key-input" value="${key}"></td>
                    <td class="align-middle"><textarea class="form-control linked-textarea source-text" rows="1">${sourceText}</textarea></td>
                    <td class="align-middle copy-col"><button type="button" class="btn btn-primary copy-text" tabindex=-1><i class="fa-solid fa-right-from-bracket"></i></i></button></td>
                    <td class="align-middle"><textarea class="form-control linked-textarea target-text" rows="1">${targetText}</textarea></td>
                    <td class="align-middle action-col"><button type="button" class="btn btn-danger remove-row" tabindex=-1><i class="fa-solid fa-minus"></i></button></td>
                `;

                table.appendChild(tr);

                addTextareaSizing(tr);
                addRemoveListener(tr.querySelector(".remove-row"));
                addCopyListener(tr.querySelector(".copy-text"));
            }

            // TEXTAREA AUTO-SIZING
            function addTextareaSizing(row) {
                row.querySelectorAll(".linked-textarea").forEach(textarea => {
                    textarea.addEventListener("input", syncHeight);
                    textarea.addEventListener("mousedown", syncHeight);
                });
            }

            // REMOVE BUTTON
            function addRemoveListener(button) {
                button.addEventListener("click", function () {
                    const row = this.closest("tr");
                    row.remove();
                });
            }

            // COPY BUTTON (default -> target)
            function addCopyListener(button) {
                const row = button.closest("tr");
                const sourceText = row.querySelector(".source-text");
                const targetText = row.querySelector(".target-text");

                function updateButtonState() {
                    if (targetText.value.trim() === "") {
                        button.classList.add("btn-primary");
                        button.classList.remove("btn-secondary");
                        button.disabled = false;
                    } else {
                        button.classList.add("btn-secondary");
                        button.classList.remove("btn-primary");
                        button.disabled = true;
                    }
                }
                updateButtonState();

                button.addEventListener("click", function () {
                    targetText.value = sourceText.value;
                    updateButtonState();
                });

                targetText.addEventListener("input", updateButtonState);
            }

            // SUBMIT FORM BUTTON
            function addSubmitListener(form) {
                form.addEventListener("submit", function (event) {
                    const rows = document.querySelectorAll("#translationsTable tbody tr");

                    let data = {};
                    let keyValues = new Map();
                    let hasDuplicate = false;

                    rows.forEach(row => {
                        const keyInput = row.querySelector(".key-input");
                        const key = keyInput.value.trim();
                        const sourceText = row.querySelector(".source-text").value.trim();
                        const targetText = row.querySelector(".target-text").value.trim();
                        const targetLang = hiddenTargetLang.value;

                        if (key && (sourceText || targetLang)) {
                            if (keyValues.has(key)) {
                                hasDuplicate = true;
                                keyInput.classList.add("is-invalid");
                                keyValues.get(key).classList.add("is-invalid");
                            } else {
                                keyValues.set(key, keyInput);
                                keyInput.classList.remove("is-invalid");
                            }

                            if (!data[key]) data[key] = {};
                            data[key]["default"] = sourceText;
                            data[key][targetLang] = targetText;
                        }
                    });

                    if (hasDuplicate) {
                        event.preventDefault();
                        alert("Duplicitní klíče nejsou povoleny! Opravte je před odesláním.");
                    } else {
                        hiddenTranslations.value = JSON.stringify(data);
                    }
                });
            }

            // KEYBOARD EVENTS
            function translationEditorKeyboardEvents() {
                document.addEventListener("keydown", function (event) {
                    if (event.key === "Insert") { // INSERT: Add new row
                        event.preventDefault();
                        addRow();
                    }
                    if (event.ctrlKey && event.key === "s") { // CTRL+S: Submit
                        event.preventDefault();
                        document.querySelector(".translationEditorForm input[type='submit']").click();
                    }
                });
            }

            // INIT LISTENERS
            function initListeners() {
                document.getElementById("addRow").addEventListener("click", () => addRow());
                document.querySelectorAll(".remove-row").forEach(button => addRemoveListener(button));
                document.querySelectorAll(".copy-text").forEach(button => addCopyListener(button));
                addSubmitListener(document.querySelector(".translationEditorForm"));
                translationEditorKeyboardEvents();
            }
            initListeners();


            // TEXTAREA PAIR AUTO-RESIZE ---->>
            const MAX_HEIGHT = 155;

            document.querySelectorAll(".linked-textarea").forEach(textarea => {
                textarea.addEventListener("input", syncHeight);
                textarea.addEventListener("mousedown", syncHeight);
            });

            function syncHeight(event) {
                const area1 = event.target;
                const area2 = getPairedTextarea(area1);
                if (!area2) return;

                adjustHeight(area1, area2);
            }

            function syncAllHeights() {
                document.querySelectorAll(".translation-row").forEach(row => {
                    const areas = row.querySelectorAll(".linked-textarea");
                    if (areas.length === 2) {
                        adjustHeight(areas[0], areas[1]);
                    }
                });
            }
            syncAllHeights(); // Adjusts all sizes when page loads

            function adjustHeight(area1, area2) {
                area1.style.height = "auto";
                area2.style.height = "auto";

                let newHeight = Math.max(area1.scrollHeight, area2.scrollHeight);

                if (newHeight > MAX_HEIGHT) {
                    newHeight = MAX_HEIGHT;
                    area1.style.overflowY = "auto";
                    area2.style.overflowY = "auto";
                } else {
                    area1.style.overflowY = "hidden";
                    area2.style.overflowY = "hidden";
                }

                area1.style.height = area2.style.height = newHeight + "px";
            }

            function getPairedTextarea(textarea) {
                const row = textarea.closest(".translation-row");
                return row ? row.querySelectorAll(".linked-textarea")[0] === textarea
                    ? row.querySelectorAll(".linked-textarea")[1]
                    : row.querySelectorAll(".linked-textarea")[0]
                    : null;
            }
            // <<---- TEXTAREA PAIR AUTO-RESIZE

        });
    </script>
{/syntax}
